- v0.0.1 Activity flow:

  Execution Flow (detailed)
    - Client
      - Send execution request
        - dependencies, compile [if needed], run, inputs, std args, environment variables, source files
        - {
            "files": [
              {
                "name": "cutor.nix",
                "content": "code"
              },
              {
                "name": "compile.sh",
                "content": "code"
              },
              {
                "name": "run.sh",
                "content": "code"
              },
              {
                "name": "file.lang",
                "content": "code",
                encoding: "utf8|base64|hex"
              },
            ],
            "inputs": "string of input data",
            "args": [
              "arg1",
              "arg2",
              "arg3"
            ],
            "env": {
              "key1": "value1",
              "key2": "value2",
              "key3": "value3"
            }
          }
    - Request handler
      - Parse request
      - Create Submission object
        - wrap user request inside Request object
        - Add
          "Submission_id": string,
          "invisibility_Time_stamp": string,
          "Response":{
            "status": "pending",
            "dependencies": {
              "stdout": "",
              "stderr": "",
              "time": "",
              "signal": ""
            },
            "compile": {
              "stdout": "",
              "stderr": "",
              "time": "",
              "signal": ""
            },
            "run": {
              "stdout": "",
              "stderr": "",
              "time": "",
              "signal": ""
            }
          }
      - Store Submission object in Submission Store
      - Sends a message to the Submission queue
        - Submission_id: string
    - Executor
      - Retrieve Submission object
      - Update time_stamp of the Submission object
      - keep updating time stamp every n secs in the background
      - Create Dependencies object
        - {
            build_id: string,
            "invisibility_Time_stamp": string,
            "content of cutor.nix"
          }
      - Store Dependencies object in Build store
      - Send Message to Build messages
        - build_id: string
    - Cache Builder
      - Retrieve Dependencies object
      - Installs Dependencies in Cache
        - Put content of Dependencies object "content of cutor.nix" in a cutor.nix file
        - nix-shell on the directory of the files
        - [if nix-shell fails] go to last step
        - [if Process takes more than pre-determined memory, time, stdout, stderr] go to last step
      - Send the corresponding stdout, stderr, time, signal to Build Messages
    - Executor
      - [if inappropriate Received signal] update Submission object accordingly and go to last step
      - Modifies submission request with the new status (Dependencies Installed)
        - Update "status" to "status":"DEPENDENCIES_INSTALLED"
      - Create files from the content of {"cutor.nix", "files", "compile.sh", "run.sh"}
      - Creates a docker container to compile and run code and mount volumes {"/nix", "nixpkgs.tarball", "shell.nix", "files"}
      - Start nix-shell to isolate the dependencies
      - [if specified in the Submission object] Compiles the code
        - [if compile failed] update Submission Object accordingly and go to last step
        - [if Process takes more than pre-determined memory, time, stdout, stderr] update Submission object accordingly
          and go to last step
        - Update the Submission object accordingly
      - Runs Code
        - [if Process takes more than pre-determined memory, time, stdout, stderr] update Submission Object accordingly
          and go to last step
        - Update the Submission object accordingly
      - Stop and Delete Docker container

  Health checking flow
    - Submission Health Checker
      - checks all invisibility_Time_stamps in Submission store and
        if one goes above a certain limit reset submission object in the store and
        send message to the Submission Messages
      - do this every n secs
    - Build Health Checker
      - checks all invisibility_Time_stamps in Build store and
        if one goes above a certain limit reset dependency object in the store and
        send message to the Build Messages
      - do this every n secs

  Submission Status Flow
    - Client
      - Request Viewing Submission Status
    - Request handler
      - Return Submission.Response Object

  Viewing Dependencies Flow
    - Client
      - Request Viewing all Dependencies
    - Request handler
      - Parse request
      - Create Submission object
      - Store Submission object in Submission Store
      - waits for modification
    - Submission Store
      - Notifies Executor with the arrival of the Submission object
    - Executor
      - Modifies the Submission object by adding Listed packages from cache
    - Submission Store
      - Notifies the Request handler with the completion of the Request
    - Request handler
      - Return Submission.Response Object


- Future iterations activity flow todo
  - Smarter caching (delete unused dependencies)
  - Rootless Docker containers, more secure Docker options
