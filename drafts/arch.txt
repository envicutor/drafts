- v0.0.1 Activity flow:

  Execution Flow (detailed)
    - Client
      - Send submission request
        - dependencies, compile [if needed], run, inputs, std args, environment variables, source files
        - {
            "files": [ (SubmissionRequests.files)
              {
                "name": "cutor.nix", (SubmissionRequests.Dependencies)
                "content": "code"
              },
              {
                "name": "cutor-compile.sh", (SubmissionRequests.compile)
                "content": "code"
              },
              {
                "name": "cutor-run.sh", (SubmissionRequests.run)
                "content": "code"
              },
              {
                "name": "file.lang",(SubmissionRequests.files)
                "content": "code",
                encoding: "utf8|base64|hex"
              },
            ],
            "limits":{ (SubmissionRequests.PerRequestLimits, Configurability.limits)
              "dependencies":
              {
                "time": int,
                "memory": int,
                "Processes": int,
                "Output": int,
                "Error": int,
                "FileSize": int
              },
              "run":
              {
                "time": int,
                "memory": int,
                "Processes": int,
                "Output": int,
                "Error": int,
                "FileSize": int
              }
              "compile":
              {
                "time": int,
                "memory": int,
                "Processes": int,
                "Output": int,
                "Error": int,
                "FileSize": int
              }
            },
            "test_cases": [ (SubmissionRequests.Run.Multiple)
              {
                "inputs": "string of input data", (SubmissionRequests.STDIN)
                "args": ["arg1", "arg2", ...], (SubmissionRequests.ARGS)
              },
              ...
            ]
            "env": {  (SubmissionRequests.Environment)
              "key1": "value1",
              "key2": "value2",
              "key3": "value3"
            }
          }
    - Request handler
      - Parse request
      - Create Submission object
        - wrap user request inside Request object
        - Add
          "Submission_id": string,
          "invisibility_Time_stamp": string,
          "Response":{
            "status": "pending", (SubmissionStatus.pending)
            "dependencies": {
              "stdout": "",
              "stderr": "",
              "time": "",
              "signal": ""
            },
            "compile": {
              "stdout": "",
              "stderr": "",
              "time": "",
              "signal": ""
            },
            "run": {
              "stdout": "",
              "stderr": "",
              "time": "",
              "signal": ""
            }
          }
      - Store Submission object in Submission Store
      - Sends a message to the Submission queue
        - submission_id: id
    - Executor
      - Retrieve Submission object
      - Update time_stamp of the Submission object
      - keep updating time stamp every n secs in the background
      - Create Dependencies object
        - {
            build_id: string,
            "invisibility_Time_stamp": string,
            "content of cutor.nix"
          }
      - Store Dependencies object in Build store
      - Send Message to Build messages
        - build_id: string
    - Cache Builder
      - Retrieve Dependencies object
      - Installs Dependencies in Cache (SubmissionRequests.cache, Performance.Cache)
        - Put content of Dependencies object "content of cutor.nix" in a cutor.nix file
        - nix-shell on the directory of the files
        - [if nix-shell fails] go to last step
        - [if Process takes more than pre-determined memory, time, stdout, stderr] go to last step
      - Send the corresponding stdout, stderr, time, signal to Build Messages
    - Executor
      - [if inappropriate Received signal] update Submission object accordingly and go to last step
      - Modifies submission request with the new status (Dependencies Installed)
        - Update "status" to "status":"DEPENDENCIES_INSTALLED" (SubmissionStatus.DependenciesInstalled)
      - Create a docker container as a child process and mount: (Isolation.Submission, Security, Escaping)
        - /nix (from the "cache" volume)
        - shell.nix, nixpkgs tarball, executor program (shall be on the filesystem from the base image) (Performance.Nix)
        - cutor.nix, files, cutor-compile.sh, cutor-run.sh, cutor-env.sh, cutor-args.sh, cutor-inputs.sh
          (created from the submission request)
      - Run the runner program which:
        - Starts nix-shell to isolate the dependencies (Isolation.Dependencies)
        - Exports cutor-env.sh
        - [if specified in the Submission object] Runs compile.sh
          - On output, error, exit: signal to parent process (SubmissionStatus.Compiled)
          - [if compile failed] abort
          - [if Process takes more than pre-determined memory, time, stdout, stderr] signal to parent process, abort
        - For each case in submission.test_cases
          - Run run.sh and provide it arguments from cutor-args.sh and input from cutor-inputs.sh
            - On output, error, exit: signal to parent process (SubmissionStatus.Ran)
            - [if Process takes more than pre-determined memory, time, stdout, stderr] signal to parent process, abort
      - Listen to child process signals and update submission object accordingly
      - Stop and Delete Docker container

  Health checking flow
    - Submission Health Checker (Availability.Executor)
      - checks all invisibility_Time_stamps in Submission store and
        if one goes above a certain limit reset submission object in the store and
        send message to the Submission Messages
      - do this every n secs
    - Build Health Checker (Availability.CacheBuilder)
      - checks all invisibility_Time_stamps in Build store and
        if one goes above a certain limit reset dependency object in the store and
        send message to the Build Messages
      - do this every n secs

  Submission Status Flow
    - Client
      - Request Viewing Submission Status
    - Request handler
      - Return Submission.Response Object (SubmissionStatus.Result)

- Future iterations activity flow todo
  - Smarter caching (delete unused dependencies)
  - Rootless Docker containers, more secure Docker options
