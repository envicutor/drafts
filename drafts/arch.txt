- v0.0.1 Activity flow:

  Execution Flow
    - Client
      - Send execution request
    - Request handler
      - Parse request
      - Create Submission object
      - Store Submission object in Submission Store
    - Submission Store
      - Notifies Executor with the arrival of a Submission object
    - Executor
      - Retrieve Submission object
      - Create Dependencies object
      - Store Dependencies object in Build Requests
    - Build Requests
      - Notify the Cache Builder with the new Dependencies object
    - Cache Builder
      - Retrieve Dependencies object
      - Installs Dependencies in Cache
      - Puts a message in the build request that the request is finished
    - Build requests
      - Notify the Executor with the readiness of the environment
    - Executor
      - Modifies submission request with the new status (Dependencies Installed)
      - [if specified in the Submission object] Compiles the code
      - Modifies submission request with the new status (Compiled)
      - Runs Code
      - Modifies submission request with the new status and result of execution

  Execution Flow (detailed)
    - Client
      - Send execution request
        - dependencies, compile [if needed], run, inputs, std args, environment variables, source files
        - {
            "files": [
              {
                "name": "cutor.nix",
                "content": "code"
              },
              {
                "name": "compile.sh",
                "content": "code"
              },
              {
                "name": "run.sh",
                "content": "code"
              },
              {
                "name": "file.lang",
                "content": "code"
              },
            ],
            "inputs": "string of input data",
            "args": [
              "arg1",
              "arg2",
              "arg3"
            ],
            "env": {
              "key1": "value1",
              "key2": "value2",
              "key3": "value3"
            }
          }
    - Request handler
      - Parse request
      - Create Submission object
        - wrap user request inside Request object
        - Add
          "Response":{
            "status": "pending",
            "dependencies": {
              "stdout": "",
              "stderr": "",
              "time": "",
              "signal": ""
            },
            "compile": {
              "stdout": "",
              "stderr": "",
              "time": "",
              "signal": ""
            },
            "run": {
              "stdout": "",
              "stderr": "",
              "time": "",
              "signal": ""
            }
          }

      - Store Submission object in Submission Store
    - Submission Store
      - Notifies Executor with the arrival of a Submission object
    - Executor
      - Retrieve Submission object
      - Create Dependencies object
        - "content of cutor.nix"
      - Store Dependencies object in Build Requests
    - Build Requests
      - Notify the Cache Builder with the new Dependencies object
    - Cache Builder
      - Retrieve Dependencies object
      - Installs Dependencies in Cache
        - Put content of Dependencies object "content of cutor.nix" in a cutor.nix file
        - nix-shell on the directory of the files
        - [if nix-shell fails] go to last step
        - [if Process takes more than pre-determined memory, time, stdout, stderr] go to last step
      - Send the corresponding stdout, stderr, time, signal
    - Build requests
      - Notify the Executor with the readiness of the environment
    - Executor
      - [if inappropriate Received signal] go to last step
      - Modifies submission request with the new status (Dependencies Installed)
        - Update "status" to "status":"DEPENDENCIES_INSTALLED"
      - Creates a docker container to compile and run code
      - [if specified in the Submission object] Compiles the code
        - [if Process takes more than pre-determined memory, time, stdout, stderr] go to last step
      - Modifies submission request with the new status (Compiled)
        - Update "status" to "status":"COMPILED" and update the compile object accordingly
      - Runs Code
        - [if Process takes more than pre-determined memory, time, stdout, stderr] go to last step
      - Modifies submission request with the new status and result of execution
        - Update "status" to "status":"FINISHED" and update the run object accordingly
      - Stop and Delete Docker container



  Submission Status Flow
    - Client
      - Request Viewing Submission Status
    - Request handler
      - Return Submission.Response Object

  Viewing Dependencies Flow
    - Client
      - Request Viewing all Dependencies
    - Request handler
      - Parse request
      - Create Submission object
      - Store Submission object in Submission Store
      - waits for modification
    - Submission Store
      - Notifies Executor with the arrival of the Submission object
    - Executor
      - Modifies the Submission object by adding Listed packages from cache
    - Submission Store
      - Notifies the Request handler with the completion of the Request
    - Request handler
      - Return Submission.Response Object


- Future iterations activity flow todo
  - Smarter caching (delete unused dependencies)
  - Rootless Docker containers, more secure Docker options