- v0.0.1 Activity flow:

  Execution Flow
    - Client
      - Send execution request
    - Request handler
      - Parse request
      - Create Request object
      - Store Request object in Request store
    - Request store
      - Notifies Executor with the arrival of a Request object
    - Executor
      - Retrieve Request object
      - Create Dependencies object
      - Store Dependencies object in Build Requests
    - Build Requests
      - Notify the Cache Builder with the new Dependencies object
    - Cache Builder
      - Retrieve Dependencies object
      - Installs Dependencies in Cache
      - Puts a message in the build request that the request is finished
    - Build requests
      - Notify the Executor with the readiness of the environment
    - Executor
      - Modifies submission request with the new status (Dependencies Installed)
      - [if specified in the Request object] Compiles the code
      - Modifies submission request with the new status (Compiled)
      - Runs Code
      - Modifies submission request with the new status and result of execution

  Execution Flow (detailed)
    - Client
      - Send execution request
        - dependencies, compile [if needed], run, inputs, std args, environment variables, source files
        - {
            "files": [
              {
                "name": "cutor.nix",
                "content": "code"
              },
              {
                "name": "compile.sh",
                "content": "code"
              },
              {
                "name": "run.sh",
                "content": "code"
              },
              {
                "name": "file.lang",
                "content": "code"
              },
            ],
            "inputs": "string of input data",
            "args": [
              "arg1",
              "arg2",
              "arg3"
            ],
            "env": {
              "key1": "value1",
              "key2": "value2",
              "key3": "value3"
            }
          }
    - Request handler
      - Parse request
      - Create Request object
        - Add to the request {
          "status": "pending",
          "dependencies": {
            "stdout": "",
            "stderr": "",
            "time": "",
            "signal": ""
          },
          "compile": {
            "stdout": "",
            "stderr": "",
            "time": "",
            "signal": ""
          },
          "run": {
            "stdout": "",
            "stderr": "",
            "time": "",
            "signal": ""
          }
        }
      - Store Request object in Request store
    - Request store
      - Notifies Executor with the arrival of a Request object
    - Executor
      - Retrieve Request object
      - Create Dependencies object
        - "content of cutor.nix"
      - Store Dependencies object in Build Requests
    - Build Requests
      - Notify the Cache Builder with the new Dependencies object
    - Cache Builder
      - Retrieve Dependencies object
      - Installs Dependencies in Cache
        - Put content of Dependencies object "content of cutor.nix" in a cutor.nix file
        - nix-shell on the directory of the files
        - [if nix-shell fails] go to last step
        - [if Process takes more than pre-determined memory, time, stdout, stderr] go to last step
      - Send the corresponding stdout, stderr, time, signal
    - Build requests
      - Notify the Executor with the readiness of the environment
    - Executor
      - [if inappropriate Received signal] go to last step
      - Modifies submission request with the new status (Dependencies Installed)
        - Update "status" to "status":"DEPENDENCIES_INSTALLED"
      - Creates a docker container to compile and run code
      - [if specified in the Request object] Compiles the code
        - [if Process takes more than pre-determined memory, time, stdout, stderr] go to last step
      - Modifies submission request with the new status (Compiled)
        - Update "status" to "status":"COMPILED" and update the compile object accordingly
      - Runs Code
        - [if Process takes more than pre-determined memory, time, stdout, stderr] go to last step
      - Modifies submission request with the new status and result of execution
        - Update "status" to "status":"FINISHED" and update the run object accordingly
      - Stop and Delete Docker container



  Submission Status Flow
    - Client
      - Request Viewing Submission Status
    - Request handler
      - Return Request object

  Viewing Dependencies Flow
    - Client
      - Request Viewing all Dependencies
    - Request handler
      - Parse request
      - Create Request object
      - Store Request object in Request Store
      - waits for modification
    - Request Store
      - Notifies Executor with the arrival of the Request object
    - Executor
      - Modifies the Request object by adding Listed packages from cache
    - Request Store
      - Notifies the Request handler with the completion of the Request
    - Request handler
      - Return Request object


- Future iterations activity flow todo
  - Process limits/constraints for each stage
  - Smarter caching (delete unused dependencies)
  - Rootless Docker containers, more secure Docker options

============================================================

- v0.0.1 Request structure
  {
    files[]: {
      name: string
      content: string
      encoding: string - base64 | utf8 - default utf8
    }
    stdin: string
    args: string[]
  }

- Let stage_output =
  {
    stdout: string
    stderr: string
    output: string
    code: int
    signal: string
  }

- 0.0.1 Submission structure
  {
    id: UUID
    status: string - QUEUED | SETTING_UP_ENVIRONMENT | BUILDING | COMPILING | RUNNING
    environment: stage_output
    build: stage_output
    compile: stage_output
    run: stage_output
  }
