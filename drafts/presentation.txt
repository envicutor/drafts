- What code execution systems are
  - How does a website like CodeForces run the contestants code?
- Code execution systems examples
  - Judge0
  - Piston
  - Sandkasten
- The problems with current code execution systems
  - Give an example of a website whose owner wants to use a language that doesn't exist on Judge0
  - They have to be explicitly configured to support certain dependencies (interpreters, compilers, libraries, etc)
    - Show Judge0 DockerFile
    - Show Sandkasten nix files
    - Show Piston's repo component
- Proofs that these problems exist
  - GitHub issues
    - Piston
      - https://github.com/engineer-man/piston/issues
    - Judge0
      - https://github.com/judge0/judge0/issues/425
      - https://github.com/judge0/judge0/issues/390
      - https://github.com/judge0/judge0/issues/176
      - https://github.com/judge0/judge0/issues/177
      - https://github.com/judge0/judge0/issues/266
      - https://github.com/judge0/judge0/issues/237
      - https://github.com/judge0/judge0/issues/268
  - Proofs from source code
    - Judge0 (https://github.com/judge0/compilers/blob/92fa2173c0e5ae02922bf1939085db986dfbf5c4/Dockerfile#L92)
      - Need to update the DockerFile and rebuild the app to add a new dependency
      - Difficulty - | Needing to reload the application 1
    - Piston (https://github.com/engineer-man/piston/blob/master/packages/java/15.0.2/build.sh)
      - Can update the repo component without reloading the application but updating the repo is more involved
      - Difficulty -- | Needing to reload the application 0
    - Sandkasten (https://github.com/Defelo/sandkasten/blob/develop/nix/packages/java.nix)
      - Have to update the Nix file (which is relatively easy) but need to reload the application
      - Difficulty - | Needing to reload the application 1
- The problem's solution (Envicutor)
  - The best of all worlds
    - Send a shell.nix file with the submission request
      - Difficulty - | Needing to reload the application 0
    - Envicutor will automatically download the dependencies that are not cached and make them available to the
      submission
  - Go back to the website's owner who wants to use a new language Envicutor
    - Maybe animation of Envicutor replacing Judge0 in the previous example slide
- Envicutor requirements
  - Bullet lists probably
- How Envicutor works
  - Architecture (component diagram)
    - A day in the life of a submission (animation for creating a submission, and receiving it)
      - Show the requirements that are satisfied during the animation
  - How this architecture satisfies the requirements
  - The technologies that are used
    - With flashbacks from the "day in the life of a submission" animation
- Work plan
  - How we are working
    - Iterative development
  - Work we have done so far
  - WIP
    - Pseudocode
    - Class diagram
      - Why we don't have a class diagram for the current phase
    - ...

changes for the presentation:
  1- change the title of execution flow to something more abstract where laymen can know what they're seeing.
  2- combine the flows together into one big flow where it shows the entire flow from the submission of the request till
     getting the status.
  3- make gantt chart for the workflow (maybe 2-4 slides or smth) make it slide from right to left.
  4- make demo
  5- add challenges

- Introduction: 3
- OSS: 1.5
- Specification
  - Package management 3
  - Process isolation 2.5
  - Availability/scalability/fault tolerance 3
- Time plan 1
- Conclusion/demo (day in the life of a submission) 2

===================================

- Final presentation ideas
  - Simulation testing (use real data to simulate a contest)
  - Piston, Judge0, Sandkasten offer no network isolation with internet option on
  - Why Nix?
    - Package A depends on C
    - Package B depends on D
    - C and D are conflicting
  - Solving bad references in ~/.nix-profile problem
    - Doing nix stuff at runtime
  - How we optimized nix shell startup
  - Project examples for: a simple system requires more knowledge and experience to build than a complex one
  - Isolate without systemd
  - Judge0 has no per-request limits
  - Bad examples of security
    - https://www.online-ide.com/, first search result for "online ide", lack of isolation (every one runs under the same user)
    - Piston
      - Everyone runs as on the same namespace (can see all processes, have access to shared /tmp, etc.)
      - Does it have proper memory limits?
    - Judge0: insecure --share-net flag
  - Which config on client, which config on server?
    - max system limits
    - cmd
    - files
  - implementation detail: encapsulation to ensure limits are validated against system limits, combined with rust traits to avoid boilerplate/inheritance
  - Configuring isolate without systemd to use cgroup v2
  - Piston does not measure CPU time (and probably Sandkasten?)
  - Judge0 needs sudo in worker in order to create files in workdir
  - RAII pattern
  - Why SQLite?
  - Why the project is not just a library (security)
  - Why we didn't do Judge0's larger-scope architecture
  - How project evolved to focus mostly on short-lived one-shot submissions
  - Judge0 and Piston install pip packages globally
