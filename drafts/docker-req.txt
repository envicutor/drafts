- CacheBuilder
  - Create a directory with shell.nix
  - Create a child Docker container with nsjail nix-build as its command
    - nsjail
      - Need to limit time
      - Need to limit memory
      - Need to connect to nix-daemon socket (multi-user system)
      - Have RW access to ~ (we are in a separate container anyway)
- Worker
  - Does not need to be nix-based
  - Create a directory with shell.nix, cutor-compile.sh, cutor-run.sh (submission directory)
  - Create a child Docker container with worker init program as its init program
    - nsjail nix-build shell.nix
      - Need to limit time
      - Need to limit memory
      - Need to get the caches from the CacheBuilder
      - Need to connect to nix-daemon to get the consistent configuration from the child container
      - Need RW access to the submission directory
      - Have RW access to ~ (we are in a separate container anyway)
    - nsjail nix-shell cutor-compile.sh
      - Same as above
    - nsjail nix-shell cutor-run.sh
        - Same as above
    - Clean up submission directory

- CacheBuilder container
  - Needs to be able to start Docker and have the child container image
  - Needs to have nix to be able to start nix-daemon
  - Needs to have a persistent nix directory
- CacheBuilder child container
  - Needs to have nix (as a client to nix-daemon)
  - Needs to have nsjail
  - Needs to have multiple users
  - Needs to have nix-daemon socket mounted to pass it to nsjail
  - Read-only /nix from CacheBuilder to pass it to nsjail
- Worker container
  - Needs to be able to start Docker and have the child container image
- Worker child container
  - Nix commands need to be configured to use cache substituter
  - Needs to have nix to be able to start nix-daemon and pass the socket to nsjail
  - Needs to have worker-init baked in
  - Needs to have nsjail
  - Needs R/W access to the submission directory to pass it R/W to nsjail
