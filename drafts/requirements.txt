- Functional requirements
  - Submission requests (SubmissionRequests)
    - The client shall be able to specify:
        - The arbitrary files that the execution needs in utf8, hex or base64 (Files)
        - The dependencies that their code needs as nix packages (Dependencies)
        - How to compile the code as a shell script (Compile)
        - How to run the code as a shell script (Run)
        - The environment variables that the execution needs (Environment)
        - The standard input that the execution needs (STDIN)
        - The standard arguments that the execution needs (ARGS)
    - The system shall cache newly requested dependencies
  - Submission status request (SubmissionStatus)
    - The client shall be able to:
      - Check:
        - If their submission got picked up by a worker (Pending)
        - Whether the dependencies of their submission got installed
          successfully (dependencies stage) (DependenciesInstalled)
        - Whether the their submission's code finished compiling (compile stage) (Compiled)
        - Whether the their submission's code finished running (run stage) (Ran)
        - The result of their submission (each stage's stderr, stdout, signal, time, memory) (Result)
  - Get packages request (PackagesRequest)
    - The client shall be able to retrieve the cached packages (Retrieve)
  - Execution limits (Limits)
    - For each stage, the client shall be able to specify linux "prlimits" (PrLimits)

- Non-Functional requirements
  - Isolation
    - Every Submission shall not see nor affect other submissions
  - Security
    - Clients shall not be able to escape the code execution activity and gain access to the underlying system
  - Performance
    - The system shall be able to accommodate cached nix packages which decreases latency when client asks
      for a dependency that has been specified by (possibly) another client
    - The system shall provide the nix-shell dependencies to decrease the nix-shell start-up time
  - Availability
    - The system shall be able to accommodate at least 1 redundant code executors to prevent down-time
    - The system shall be able to accommodate at least 1 redundant cache builders to prevent down-time
  - Scalability
    - The System administrator shall be able to increase/decrease the number of executors in the system
    - The System administrator shall be able to increase/decrease the number of cache builders in the system
  - Configurability
    - Configuring per-stage constraints and limits
