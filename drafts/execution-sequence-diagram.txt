title Execution

actor Client
boundary RequestHandler
database SubmissionStore
control Worker
database BuildStore
control CacheBuilder
database Cache
control Container

Client->RequestHandler: send a submission request
activate RequestHandler
RequestHandler->RequestHandler: create Submission object
RequestHandler->SubmissionStore: send Submission object
activate SubmissionStore
RequestHandler->SubmissionStore: enqueue submission id
deactivate RequestHandler
Worker->SubmissionStore: pop submission id
activate Worker
Worker->SubmissionStore: retrieve Submission object
loop every n milliseconds while submission status is not ran
  Worker-->SubmissionStore: update Submission object lease
end
Worker->Worker: create Dependencies object
opt Dependencies not cached
  Worker->BuildStore: send Dependencies object
  activate BuildStore
  Worker->BuildStore: enqueue Dependencies object id
  CacheBuilder->BuildStore: pop Dependencies object id
  activate CacheBuilder
  CacheBuilder->BuildStore: retrieve Dependencies object
  loop every n milliseconds while Dependencies object still in store
    CacheBuilder-->BuildStore: update Dependencies object lease
   end
  CacheBuilder->Cache: install dependencies
  CacheBuilder->BuildStore: send message about the status of\ninstalled dependencies
  CacheBuilder->BuildStore: delete Dependencies object
  deactivate CacheBuilder
  Worker->BuildStore: consume message
  deactivate BuildStore
  opt dependency install fails
    Worker->SubmissionStore: update Submission object\nwith dependency install failure
  end
end
opt installing dependencies didn't fail or all dependencies were cached
  Worker->SubmissionStore: update Submission object
  Worker->*Container: <<create>>
  Container->Cache: mount
  activate Container
  opt compilation was requested
    Container->Container: execute the compile instructions
    alt compile fails
      Container->Worker: return compile failed
      Worker->SubmissionStore:update the Submission object with\nfailure of compilation stage
    else
      Container->Worker: return the stdout, stderr, signal, exit code for\nthe compile stage
      Worker->SubmissionStore: update the Submission object with\nthe received data
    end
  end
  opt compiled successfully or no compile existed
    loop for each test case and while a run has not failed
      Container->Container: execute the run instructions
      alt run fails
        Container->Worker: return run failed
        Worker->SubmissionStore: update the Submission object with the\nfailure of the run stage
      else
        Container->Worker: return the stdout, stderr, signal, exit code\nfor the run stage
        Worker->SubmissionStore: update the Submission object with\nthe received data

      end
    end

  end
  Worker->Container: <<destroy>>
  deactivate Container
  destroy Container
end
Worker->Worker: clean up files
deactivate Worker
deactivate SubmissionStore
  