# nix-shell --command worker_program
/*
cmd_opts
  - env
  - test_cases
  - compile and run limits
*/
- bool stage(string stage_name, string filename, limit stage_limits)
    - bool success = true
    - cp = create_child_process("prlimit --rss " + stage_limits.memory + " filename")
    - cp.on_output((output) => print(json.stringify({ stage: "stage_name", type: "output", value: output })))
    - cp.on_error((error) => print(json.stringify({ stage: "stage_name", type: "error", value: error })))
    - cp.on_exit((code, signal) => {
      print(json.stringify({stage: "stage_name", type: "exit", value: {code:code, signal:signal}}))
      success = !code
    })
    - return success

- main()
  - env = json.parse(cmd_opts("env"))
  - compile_limits = json.parse(cmd_opts("compile_limits))
  - run_limits = json.parse(cmd_opts("run_limits"))
  - for key in env:
    - export key = env
  - bool compile_successful = true
  - if file_exists("compile.sh")
    - compile_successful = stage("compile", "compile.sh", compile_limits)
  - if compile_successful
      - stage("run", "run.sh", run_limits)
