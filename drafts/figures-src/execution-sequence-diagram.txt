title Execution

actor Client
boundary RequestHandler
database InMemoryStore

database Database
control Worker
database NixStore

control CacheServer
control Container
Client->RequestHandler: send a submission request
activate RequestHandler
RequestHandler->RequestHandler: create Submission object
RequestHandler->Database:send Submission object
activate Database
RequestHandler->InMemoryStore:enqueue submission id
activate InMemoryStore
deactivate RequestHandler
activate Worker
Worker->InMemoryStore:pop submission id
Worker->Database:retrieve Submission object
loop every n milliseconds while submission status is not "FINISHED"
Worker-->InMemoryStore:update Submission object lease
end
  Worker->*Container: <<create>>
  
activate Container
CacheServer<-Container:get dependencies
activate CacheServer
CacheServer->NixStore:get dependencies
activate NixStore
NixStore->CacheServer:dependencies
CacheServer->Container:dependencies


Container->Container:install uncached dependencies 
alt installing dependencies didn't fail
CacheServer<--Container:shell.nix
NixStore<-CacheServer:install dependencies
deactivate CacheServer

deactivate NixStore
Worker<--Container:return dependencies install success
Worker-->Database:update Submission object
  
  opt compilation was requested
    Container->Container: execute the compile instructions
    alt compile fails
      Container-->Worker: return compile failed
Worker-->Database:update the Submission object with\nfailure of compilation stage
    else
      Container-->Worker: return the stdout, stderr, signal, exit code for\nthe compile stage
Worker-->Database:update the Submission object with\nthe received data
    end
  end
  opt compiled successfully or no compile existed
    loop for each test case and while a run has not failed
      Container->Container: execute the run instructions
      alt run fails
        Container->Worker: return run failed
Worker-->Database:update the Submission object with the\nfailure of the run stage
      else
        Container->Worker: return the stdout, stderr, signal, exit code\nfor the run stage
Worker-->Database:update the Submission object with\nthe received data

      end
    end

  end
    else
    Worker<--Container:return dependencies install failure
    Worker-->Database:update Submission object
  end
  Worker->Container: <<destroy>>
  deactivate Container
  destroy Container

Worker->Worker: clean up files
deactivate Worker
deactivate InMemoryStore
deactivate Database