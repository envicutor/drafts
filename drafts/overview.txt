- Remote code execution system with arbitrary package installations

- Team members
  - Ahmed Wael Nagy Wanas - 20206008
  - Adham Hazem Fahmy Shafei - 20206011
  - Omar Adel Abdel Hamid Ahmed Brikaa - 20206043
  - Mostafa Ahmed Mohammed Ahmed - 20206073
  - Ali Esmat Ahmed Orfy - 20206123

- What is a code execution system
  - A back-end system that lives in the cloud
  - Takes a request containing information about certain code to execute: language, source code, files, etc.
  - Returns the result after executing the code

- Example use cases
  - Can be integrated with programming competitions and exercises websites like LeetCode, CodeForces, etc
    so that users can submit and execute code using only the browser
  - Can be integrated with interactive coding learning environments,
    where learners follow an interactive tutorial on their browser and execute the code without
    installing anything on their system
  - Can be integrated with online (and collaborative) IDEs to help developers work together in the cloud
    without needing to install the build tools and compilers on their local systems
  - Can be integrated with coding assignments auto-graders to execute students' code

- Who are the clients of a code execution system?
  - Other systems, not users

- How some code execution systems work
  - The code execution system's developers set it up to support packages Xs
  - Client sends request to system: "I want to run source code Y that requires packages Zs"
  - If Zs are not a subset of Xs
    - error
  - else
    - Execute the program
  - Clients need to contact the system's developers to add new packages

- How our code execution system will work
  - Client sends request to system: "I want to make a 'workspace' X with packages Ys"
  - System creates an isolated workspace and installs packages Ys in that workspace
  - Client sends request to system: "I want to execute source code Z that requires packages Ws on workspace X"
  - If Ws are not a subset of Ys (low probability, usually a bug on the client side since, in the normal case case,
    the client is the one who requests both the workspace and the program execution)
    - Error
  - Else
    - Execute the program

- The workspace
  - We use the term "workspace" to refer to a configurable isolated environment in the code execution system
    with configurable packages installed.
  - Clients can run code in the environment of any workspace

- Advantages
  - No need to contact developers to add more packages which gives a lot of flexibility
  - More general purpose than the formerly mentioned code execution systems

- Similar systems
  - Piston (https://github.com/engineer-man/piston), Judge0 (https://github.com/judge0/judge0),
  Riju (https://github.com/radian-software/riju)
    - These belong to the first category of code execution systems
  - Repl.it (https://replit.com/), GitHub Codespaces (https://github.com/features/codespaces)
    - Online systems where users can write and execute code using their web browsers
    - Users create their own "repls"/"spaces" with the packages they want
      - This is similar to the workspaces concept discussed above
    - However, as far as we know, they do not provide APIs to execute code
      - This makes them almost impossible to integrate with other systems (the example use cases we discussed above)
    - Hence, they are not general-purpose
    - To describe our project in terms of a Repl.it:
      - A more general-purpose and integrable Repl.it backend

- Example use cases for our code execution system
  - All of the example use-cases we have mentioned above are now expanded
  - Programming contests/exercises/learning websites where it is allowed to
    use some libraries in certain exercises/contests while it is not in others
    - Every contest/exercise can have its own workspace
  - Online development environments for projects that require certain packages
    - Each developer can have their own workspace with these packages automatically installed
  - Auto-graders for assignments in which students use certain technologies
    - We can have a workspace for each assignment with these technologies installed

- Challenging parts
  - Coming up with the implementation of creating these isolated workspaces
  - Ensuring each workspace is created in a performant manner
  - Different security measures like ensuring no intentionally or unintentionally malicious actions can damage a
    workspace's integrity
