- Read documents as a new person
- Add Sandkasten to inspiration
- Dependencies stage seem to do some common things as the run stage and the compile stage (stdout, stderr, signal, time)
- Get rid of env in Submission object
- Add cache boolean in submission request
- Let user provide shell.nix
- Flow that describes what happens once a worker is started (cleaning up stuck files)
- Submission on disk, lease in memory
- SubmissionsStore -> Database, InMemoryStore
- Use a proper component diagram generator?
- Do new architecture
  - Remove CacheBuilderHealthChecker
  - Store shell.nix directly in the queue
  - Ability to not cache

- Are we ready to start modifying the documents?
  - No obvious security exploits
  - No obvious flow gaps
  - No infeasible to implement flow steps

- CacheBuilder
  - Create a directory with shell.nix
  - Create a child Docker container with nsjail nix-build as its init program
    - nsjail
      - Need to limit time
      - Need to limit memory
      - Need to connect to nix-daemon socket (multi-user system)
      - Have RW access to ~ (we are in a separate container anyway)
- Worker
  - Does not need to be nix-based
  - Create a directory with shell.nix, cutor-compile.sh, cutor-run.sh (submission directory)
  - Create a child Docker container with worker init program as its init program
    - nsjail nix-build shell.nix
      - Need to limit time
      - Need to limit memory
      - Need the submission directory mounted
      - Need to get the caches from the CacheBuilder
      - Need to connect to nix-daemon to get the consistent configuration from the child container
      - Have RW access to ~ (we are in a separate container anyway)
    - nsjail nix-shell cutor-compile.sh
      - Same as above
    - nsjail nix-shell cutor-run.sh
        - Same as above
    - Clean up submission directory

- Questions
  - Requirements of
    - CacheBuilder container?
    - CacheBuilder child container?
    - Worker child container?
    - Worker child container?
