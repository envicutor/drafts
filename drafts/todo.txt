- Future iterations
  - Move nix shell when installing instead of re-writing
  - Isolate --cleanup with aborted request fails with multiple processes? Isolate --cleanup try sigterm to isolate?
  - Large test cases
  - Endpoint for garbage collection
  - Cache compiled programs using hash
  - Implement bounds on limits
  - Optionally take id for adding runtime and make sure it does not exist
  - Get runtime info endpoint to help in distributed systems consistency
  - CI on packages
    - A repo that includes request templates with CI automated tests run on them to ensure their integrity
      - Users can fork their repository and have their own CI tests
  - Limit overrides
  - Interactive execution
  - Max stdout and stderr size
  - API key?
  - Ensure nix shell does not enter an infinite shell hook loop
  - CI/CD
  - Test update nix concurrency
  - How to handle large request bodies in queue?
    - Limit queue size and return "queue full"
    - Websockets and only accept data from client once a queue spot is ready (notifying the client once one is ready)
    - Distributed systems request handler while limiting the number of concurrent tasks on workers

- Poster
  - Vision/objective
    Envicutor aims to provide secure and isolated code execution environments for systems handling untrusted user-submitted code.
  - Methodology
    Drawing from three years of experience with open source code execution systems, Envicutor combines their strengths and introduces unique solutions to common problems.

    Envicutor provides robust isolation between code execution submissions preventing them from: communicating with or affecting each other, accessing sensitive data, or leaving residual files. Many code execution systems fail to satisfy all of these requirements.

    Envicutor offers fine-grained control over execution limits such as CPU-time, wall-time and memory. It reports back metrics about submissions' code execution. This is especially useful for competitive programming systems and similar platforms.

    Envicutor allows managing the code execution runtimes while the system is running. Packages required by the runtimes can co-exist safely even if they have conflicting dependencies. Many code execution systems lack these features.
  - Beneficiaries
    Envicutor is perfect for systems that deal with short-lived untrusted code execution submissions that must execute with the least overhead. Such systems include:
      - Competitive programming systems like Codeforces
      - Stateless online IDEs
      - E-graders
  - Used technologies
    - Core system
      - Rust, Axum, Isolate, Nix, SQLite, Docker, Linux
    - Testing
      - NodeJS, React, Python
  - Deliverables
    - rly?
